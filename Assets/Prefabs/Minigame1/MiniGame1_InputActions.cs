//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/Prefabs/Minigame1/MiniGame1_InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Prefabs/Minigame1/MiniGame1_InputActions.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @MiniGame1_InputActions: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @MiniGame1_InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MiniGame1_InputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerRunner"",
            ""id"": ""844d886c-fad4-4657-8b72-ec9137345b52"",
            ""actions"": [
                {
                    ""name"": ""MoveToLane1"",
                    ""type"": ""Button"",
                    ""id"": ""0306cb78-912e-40a2-9956-2faf26fa3bfe"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveToLane2"",
                    ""type"": ""Button"",
                    ""id"": ""c7bb22a8-843f-449e-8cb3-b183ad32b392"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveToLane3"",
                    ""type"": ""Button"",
                    ""id"": ""18ce9314-d195-4c31-836a-7566a2da3e48"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveToLane4"",
                    ""type"": ""Button"",
                    ""id"": ""e4cad7b5-c3d2-451d-86af-626585f4abd6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5d3ddf54-5117-4897-83d9-f3a5b74abd1b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""MoveToLane1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a98425e-846c-4c0c-a491-fb9b3261346b"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""MoveToLane1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f9ad56fe-bcb3-46e4-b818-93cd8f68a7fc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""MoveToLane2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f3caeb46-33c2-480b-ba21-739037dbaaa7"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""MoveToLane2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08182bf0-0e14-4683-ad7e-62c72e26e442"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""MoveToLane3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6cb92bfa-1f6f-48b9-bfe2-0a07f8c3c58c"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""MoveToLane3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""769f842c-ce61-4f18-b52d-08488ecc8c4f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""MoveToLane4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8dfef46-10eb-449a-be91-7d00c82a686c"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""MoveToLane4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerRunner
        m_PlayerRunner = asset.FindActionMap("PlayerRunner", throwIfNotFound: true);
        m_PlayerRunner_MoveToLane1 = m_PlayerRunner.FindAction("MoveToLane1", throwIfNotFound: true);
        m_PlayerRunner_MoveToLane2 = m_PlayerRunner.FindAction("MoveToLane2", throwIfNotFound: true);
        m_PlayerRunner_MoveToLane3 = m_PlayerRunner.FindAction("MoveToLane3", throwIfNotFound: true);
        m_PlayerRunner_MoveToLane4 = m_PlayerRunner.FindAction("MoveToLane4", throwIfNotFound: true);
    }

    ~@MiniGame1_InputActions()
    {
        UnityEngine.Debug.Assert(!m_PlayerRunner.enabled, "This will cause a leak and performance issues, MiniGame1_InputActions.PlayerRunner.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerRunner
    private readonly InputActionMap m_PlayerRunner;
    private List<IPlayerRunnerActions> m_PlayerRunnerActionsCallbackInterfaces = new List<IPlayerRunnerActions>();
    private readonly InputAction m_PlayerRunner_MoveToLane1;
    private readonly InputAction m_PlayerRunner_MoveToLane2;
    private readonly InputAction m_PlayerRunner_MoveToLane3;
    private readonly InputAction m_PlayerRunner_MoveToLane4;
    /// <summary>
    /// Provides access to input actions defined in input action map "PlayerRunner".
    /// </summary>
    public struct PlayerRunnerActions
    {
        private @MiniGame1_InputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public PlayerRunnerActions(@MiniGame1_InputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "PlayerRunner/MoveToLane1".
        /// </summary>
        public InputAction @MoveToLane1 => m_Wrapper.m_PlayerRunner_MoveToLane1;
        /// <summary>
        /// Provides access to the underlying input action "PlayerRunner/MoveToLane2".
        /// </summary>
        public InputAction @MoveToLane2 => m_Wrapper.m_PlayerRunner_MoveToLane2;
        /// <summary>
        /// Provides access to the underlying input action "PlayerRunner/MoveToLane3".
        /// </summary>
        public InputAction @MoveToLane3 => m_Wrapper.m_PlayerRunner_MoveToLane3;
        /// <summary>
        /// Provides access to the underlying input action "PlayerRunner/MoveToLane4".
        /// </summary>
        public InputAction @MoveToLane4 => m_Wrapper.m_PlayerRunner_MoveToLane4;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_PlayerRunner; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="PlayerRunnerActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(PlayerRunnerActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="PlayerRunnerActions" />
        public void AddCallbacks(IPlayerRunnerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerRunnerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerRunnerActionsCallbackInterfaces.Add(instance);
            @MoveToLane1.started += instance.OnMoveToLane1;
            @MoveToLane1.performed += instance.OnMoveToLane1;
            @MoveToLane1.canceled += instance.OnMoveToLane1;
            @MoveToLane2.started += instance.OnMoveToLane2;
            @MoveToLane2.performed += instance.OnMoveToLane2;
            @MoveToLane2.canceled += instance.OnMoveToLane2;
            @MoveToLane3.started += instance.OnMoveToLane3;
            @MoveToLane3.performed += instance.OnMoveToLane3;
            @MoveToLane3.canceled += instance.OnMoveToLane3;
            @MoveToLane4.started += instance.OnMoveToLane4;
            @MoveToLane4.performed += instance.OnMoveToLane4;
            @MoveToLane4.canceled += instance.OnMoveToLane4;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="PlayerRunnerActions" />
        private void UnregisterCallbacks(IPlayerRunnerActions instance)
        {
            @MoveToLane1.started -= instance.OnMoveToLane1;
            @MoveToLane1.performed -= instance.OnMoveToLane1;
            @MoveToLane1.canceled -= instance.OnMoveToLane1;
            @MoveToLane2.started -= instance.OnMoveToLane2;
            @MoveToLane2.performed -= instance.OnMoveToLane2;
            @MoveToLane2.canceled -= instance.OnMoveToLane2;
            @MoveToLane3.started -= instance.OnMoveToLane3;
            @MoveToLane3.performed -= instance.OnMoveToLane3;
            @MoveToLane3.canceled -= instance.OnMoveToLane3;
            @MoveToLane4.started -= instance.OnMoveToLane4;
            @MoveToLane4.performed -= instance.OnMoveToLane4;
            @MoveToLane4.canceled -= instance.OnMoveToLane4;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="PlayerRunnerActions.UnregisterCallbacks(IPlayerRunnerActions)" />.
        /// </summary>
        /// <seealso cref="PlayerRunnerActions.UnregisterCallbacks(IPlayerRunnerActions)" />
        public void RemoveCallbacks(IPlayerRunnerActions instance)
        {
            if (m_Wrapper.m_PlayerRunnerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="PlayerRunnerActions.AddCallbacks(IPlayerRunnerActions)" />
        /// <seealso cref="PlayerRunnerActions.RemoveCallbacks(IPlayerRunnerActions)" />
        /// <seealso cref="PlayerRunnerActions.UnregisterCallbacks(IPlayerRunnerActions)" />
        public void SetCallbacks(IPlayerRunnerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerRunnerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerRunnerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="PlayerRunnerActions" /> instance referencing this action map.
    /// </summary>
    public PlayerRunnerActions @PlayerRunner => new PlayerRunnerActions(this);
    private int m_KeyboardSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "PlayerRunner" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="PlayerRunnerActions.AddCallbacks(IPlayerRunnerActions)" />
    /// <seealso cref="PlayerRunnerActions.RemoveCallbacks(IPlayerRunnerActions)" />
    public interface IPlayerRunnerActions
    {
        /// <summary>
        /// Method invoked when associated input action "MoveToLane1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveToLane1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MoveToLane2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveToLane2(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MoveToLane3" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveToLane3(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MoveToLane4" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveToLane4(InputAction.CallbackContext context);
    }
}
